//
//  CertificateValidatorTests.swift
//  Lutheran RadioTests
//
//  Created by Jari Lammi on 24.7.2025.
//

import XCTest
import Security
import CommonCrypto
@testable import Lutheran_Radio

final class CertificateValidatorTests: XCTestCase {
    var validator: CertificateValidator!
    
    override func setUp() {
        super.setUp()
        validator = CertificateValidator()
    }
    
    func testComputeCertificateHash_WithValidCertificateData_ReturnsCorrectHash() throws {
        // Arrange: Use a known certificate DER data and expected hash
        // Note: Replace with actual DER bytes from a test certificate
        // For example, a sample self-signed cert DER (base64 encoded or hex)
        let sampleDERHexull DER hex from openssl s_client -connect livestream.lutheran.radio:8443 -servername livestream.lutheran.radio < /dev/null | openssl x509 -outform der | xxd -p -c 0 | tr -d '\n'
        guard let sampleDERData = Data(hexString: sampleDERHex) else {
            XCTFail("Invalid test DER data")
            return
        }
        
        guard let certificate = SecCertificateCreateWithData(nil, sampleDERData as CFData) else {
            XCTFail("Failed to create SecCertificate from test data")
            return
        }
        
        let expectedHash = "CC:F7:8E:09:EF:F3:3D:9A:5D:8B:B0:5C:74:28:0D:F6:BE:14:1C:C4:47:F9:69:C2:90:2C:43:97:66:8B:3D:CC"  // Matches the pinned hash from CertificateValidator.swift
        
        // Act
        let computedHash = validator.computeCertificateHash(for: certificate)
        
        // Assert
        XCTAssertEqual(computedHash, expectedHash, "Computed hash should match expected value for known DER")
    }
    
    func testValidateCertificateChain_MatchingHash_ReturnsTrue() throws {
        // Arrange: Mock SecTrust with certificate that matches pinned hash
        let mockTrust = createMockSecTrust()
        
        // Act
        let isValid = validator.validateCertificateChain(serverTrust: mockTrust)
        
        // Assert
        XCTAssertTrue(isValid, "Should return true for matching hash")
    }
    
    func testValidateCertificateChain_NonMatchingHash_ReturnsFalse() throws {
        // Arrange: Use the top-level MismatchValidator subclass
        let mismatchValidator = MismatchValidator()
        let mockTrust = createMockSecTrust()
        
        // Act
        let isValid = mismatchValidator.validateCertificateChain(serverTrust: mockTrust)
        
        // Assert
        XCTAssertFalse(isValid, "Should return false for non-matching hash")
    }
    
    func testValidateServerTrust_DuringTransitionWithMismatch_ReturnsTrue() throws {
        // Arrange: Use the top-level MismatchValidator subclass and mock the date to be in transition period
        let mismatchValidator = MismatchValidator()
        mismatchValidator.currentDate = { CertificateValidator.transitionStartDate }
        let mockTrust = createMockSecTrust()
        let exp = expectation(description: "Completion called")
        var result: Bool?
        
        // Act
        mismatchValidator.validateServerTrust(mockTrust) { isValid in
            result = isValid
            exp.fulfill()
        }
        wait(for: [exp], timeout: 1.0)
        
        // Assert
        XCTAssertTrue(result ?? false, "Should return true during transition despite mismatch")
    }
    
    // Helper to create mock SecTrust
    private func createMockSecTrust() -> SecTrust {
        let sampleDERHexalid DER matching pinned hash
        guard let der = Data(hexString: sampleDERHex) else {
            XCTFail("Invalid DER data")
            fatalError()  // For test safety
        }
        guard let cert = SecCertificateCreateWithData(nil, der as CFData) else {
            XCTFail("Failed to create SecCertificate")
            fatalError()  // For test safety
        }
        let policy = SecPolicyCreateBasicX509()
        var trust: SecTrust?
        let createStatus = SecTrustCreateWithCertificates(cert, policy, &trust)
        guard createStatus == errSecSuccess, let mockTrust = trust else {
            XCTFail("Failed to create mock SecTrust: \(createStatus)")
            fatalError()  // For test safety
        }
        // Force trust evaluation to succeed by setting anchors
        SecTrustSetAnchorCertificates(mockTrust, [cert] as CFArray)
        return mockTrust
    }
    
    // Add more as needed
}

// Top-level subclass for testing mismatched hashes (shared across tests)
final class MismatchValidator: CertificateValidator, @unchecked Sendable {
    override var pinnedCertHash: String {
        "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00"  // Invalid hash to force mismatch
    }
}

extension Data {
    init?(hexString: String) {
        // Implementation for hex to Data
        let len = hexString.count / 2
        var data = Data(capacity: len)
        var i = hexString.startIndex
        for _ in 0..<len {
            let j = hexString.index(i, offsetBy: 2)
            let bytes = hexString[i..<j]
            if var num = UInt8(bytes, radix: 16) {
                data.append(&num, count: 1)
            } else {
                return nil
            }
            i = j
        }
        self = data
    }
}
